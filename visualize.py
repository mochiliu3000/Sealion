import pandas as pd
import re
import matplotlib.pyplot as plt


"""
Test function for regex
"""
def parse_forward(line):
    line_regex = re.compile("^Region Avg IOU: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "Class: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "Obj: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "No Obj: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "Avg Recall: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "count: ([-+]?[0-9]*\.?[0-9]*)$")
    float_search = line_regex.search(line)
    return float_search.group(1), float_search.group(2), float_search.group(3), float_search.group(4), float_search.group(5), float_search.group(6)

"""
Test function for regex
"""
def parse_backward(line):
    line_regex = re.compile("^([\d+]):\\s+([-+]?[0-9]*\.?[0-9]*),\\s+"
                            "([-+]?[0-9]*\.?[0-9]*)\\s+avg,\\s+"
                            "([-+]?[0-9]*\.?[0-9]*)\\s+rate,\\s+"
                            "([-+]?[0-9]*\.?[0-9]*)\\s+seconds,\\s+"
                            "([\d+])\\s+images$")
    float_search = line_regex.search(line)
    print float_search.group(1)
    print float_search.group(2)
    print float_search.group(3)

"""
Parse log generated by darknet
"""
def parse_log(path):
    forward_regex = re.compile("^Region Avg IOU: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                               "Class: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                               "Obj: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                               "No Obj: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                               "Avg Recall: ([-+]?[0-9]*\.?[0-9]*),\\s+"
                               "count: ([-+]?[0-9]*\.?[0-9]*)$")
    backward_regex = re.compile("^([\d+]): ([-+]?[0-9]*\.?[0-9]*),\\s+"
                                "([-+]?[0-9]*\.?[0-9]*)\\s+avg,\\s+"
                                "([-+]?[0-9]*\.?[0-9]*)\\s+rate,\\s+"
                                "([-+]?[0-9]*\.?[0-9]*)\\s+seconds,\\s+"
                                "([\d+])\\s+images$")
    df_forward = pd.DataFrame(columns=['Region_Avg_IOU', 'Class', 'Obj', 'No_Obj', 'Avg_Recall', 'count'])
    df_backward = pd.DataFrame(columns=['iter', 'Avg_Loss'])

    with open(path, "r") as log:
        for line in log:
            search_first = forward_regex.search(line)
            if search_first:
                df_forward = df_forward.append({'Region_Avg_IOU': search_first.group(1), 'Class': search_first.group(2), 'Obj': search_first.group(3), 'No_Obj': search_first.group(4),
                                   'Avg_Recall': search_first.group(5), 'count': search_first.group(6)}, True)
            search_second = backward_regex.search(line)
            if search_second:
                df_backward = df_backward.append({'iter': search_second.group(1), 'Avg_Loss': search_second.group(3)}, ignore_index=True)
    return df_forward, df_backward

def visualize(df, col_name):
    plt.figure()
    plt.plot(df[col_name])
    plt.show()

if __name__ == '__main__':
    # parse_backward("1: 271.264893, 271.264893 avg, 0.000000 rate, 97.467979 seconds, 1 images")

    df_forward, df_backward = parse_log("/home/sleepywyn/Dev/GitRepo/darknet/sealion.log")
    print df_forward
    print df_backward

    columns = ['Region_Avg_IOU', 'Class', 'Obj', 'No_Obj', 'Avg_Recall']
    for c in columns:
        visualize(df_forward, c)

    visualize(df_backward, 'Avg_Loss')

